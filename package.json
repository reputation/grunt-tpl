{
  "name": "grunt-tpl",
  "description": "Concatenate templates to one object in one file.",
  "version": "1.0.2",
  "homepage": "https://github.com/reputation/grunt-tpl",
  "author": {
    "name": "Jeff Harnois",
    "email": "jeff.harnois@reputation.com"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/reputation/grunt-tpl.git"
  },
  "bugs": {
    "url": "https://github.com/reputation/grunt-tpl/issues"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "https://github.com/reputation/grunt-tpl/blob/master/LICENSE-MIT"
    }
  ],
  "main": "grunt.js",
  "bin": {
    "grunt-tpl": "bin/grunt-tpl"
  },
  "engines": {
    "node": "*"
  },
  "scripts": {
    "test": "grunt test"
  },
  "dependencies": {
    "grunt-lib-contrib": "~0.5.1"
  },
  "devDependencies": {
    "grunt-contrib-jshint": "~0.2.0",
    "grunt-contrib-nodeunit": "~0.1.2",
    "grunt-contrib-internal": "~0.4.2",
    "grunt-contrib-clean": "~0.4.0",
    "grunt": "~0.4.0"
  },
  "peerDependencies": {
    "grunt": ">=0.4.0"
  },
  "keywords": [
    "gruntplugin"
  ],
  "readme": "# grunt-tpl\n\nConcatenate templates to one object in one file.\n\n## Getting Started\nInstall this grunt plugin next to your project's [grunt.js gruntfile][getting_started] with: `npm install grunt-tpl`\n\nThen add this line to your project's `grunt.js` gruntfile:\n\n```javascript\ngrunt.loadNpmTasks('grunt-tpl');\n```\n\n[grunt]: https://github.com/cowboy/grunt\n[getting_started]: https://github.com/cowboy/grunt/blob/master/docs/getting_started.md\n\n## Documentation\n\nThis task is meant to concatenate templates of any variety to one file with with one object to be compiled client-side.\n\n### Project Configuration\nThis example shows a brief overview of the [grunt.js gruntfile][getting_started] config properties used by the `tpl` task.\n\n```javascript\n// Project configuration.\ngrunt.initConfig({\n  tpl: {\n    \"path/to/concatenated/template-file.js\": [\"array/of/paths/to/templates/**/*\", \"/exact/location/of/template.mustache\"]\n  }\n});\n```\n\nSpecify the paths to the concatenated template files as keys. That filename (extension or not) will be used to namespace the Object. The values can be a string or array of strings to relative or absolute paths to your template files. You can use wildcards such as `/**/*` and `/*.js` as documented by [minimatch](https://github.com/isaacs/minimatch).\n\n### Example\n\nAssume you have three Mustache templates named `a.mustache`, `b.tpl`, and `c` in a directory `test/templates/`.\n\n#### a.mustache\n\n    Hello {{a}}\n\n#### b.tpl\n\n    <ul>\n    {{#items}}\n      <li>{{.}}</li>\n    {{/items}}\n    </ul>\n\n#### c\n\n    template {{c}}\n\nIf you want them concatenated into the file `simple/path/t.js`, your config would be:\n\n```javascript\ngrunt.initConfig({\n  // ... other configs\n\n  tpl: {\n    \"simple/path/t.js\": [\"test/templates/*\"]\n  }\n\n  // ... other configs\n});\n```\n\n#### t.js\n\n```javascript\nthis['t'] = this['t'] || {};\n\nthis['t']['a'] = 'Hello {{a}}';\n\nthis['t']['b'] = '<ul>{{#items}}  <li>{{.}}</li>{{/items}}</ul>';\n\nthis['t']['c'] = 'template {{c}}';\n```\n\n**The filenames of your templates will be used as keys in the object**\n\nYou can then compile these at any time.\n\n```javascript\nvar h = Hogan.compile(window.t['a']);\nh.render(info);\n```\n\n## Contributing\nIn lieu of a formal styleguide, take care to maintain the existing coding style. Add unit tests for any new or changed functionality. Lint and test your code using [grunt][grunt].\n\n## Release History\n\n2013/03/28 - v1.0.0 - Update to grunt 4.0.0.\n\n2012/04/25 - v0.1.0 - Initial release.\n\n## License\nCopyright (c) 2013 Reputation.com\nLicensed under the MIT license.\n",
  "readmeFilename": "README.md",
  "_id": "grunt-tpl@1.0.0",
  "dist": {
    "shasum": "8250d772378f2a285b3b62bfe71f3407eeb18aaf"
  },
  "_from": "grunt-tpl@1.0.0",
  "_resolved": "https://registry.npmjs.org/grunt-tpl/-/grunt-tpl-1.0.0.tgz"
}
